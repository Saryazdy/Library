// <auto-generated />
using System;
using Library.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Library.Infrastructure.Migrations
{
    [DbContext(typeof(LibraryDbContext))]
    [Migration("20250819101300_InitialCreate2")]
    partial class InitialCreate2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BookAuthor", b =>
                {
                    b.Property<Guid>("BookId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BookAggregateId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("BookId", "AuthorId");

                    b.HasIndex("AuthorId");

                    b.HasIndex("BookAggregateId");

                    b.ToTable("BookAuthors");
                });

            modelBuilder.Entity("Library.Domain.Aggregates.AuthorAggregate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.HasKey("Id");

                    b.ToTable("Authors");
                });

            modelBuilder.Entity("Library.Domain.Aggregates.BookAggregate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.HasKey("Id");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("BookAuthor", b =>
                {
                    b.HasOne("Library.Domain.Aggregates.AuthorAggregate", "AuthorAggregate")
                        .WithMany("BookAuthors")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Library.Domain.Aggregates.BookAggregate", null)
                        .WithMany("BookAuthors")
                        .HasForeignKey("BookAggregateId");

                    b.HasOne("Library.Domain.Aggregates.BookAggregate", "BookAggregate")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AuthorAggregate");

                    b.Navigation("BookAggregate");
                });

            modelBuilder.Entity("Library.Domain.Aggregates.BookAggregate", b =>
                {
                    b.OwnsOne("Book", "Book", b1 =>
                        {
                            b1.Property<Guid>("BookAggregateId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uniqueidentifier");

                            b1.Property<DateTimeOffset>("Created")
                                .HasColumnType("datetimeoffset");

                            b1.Property<string>("CreatedBy")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Description")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<int>("Genre")
                                .HasColumnType("int");

                            b1.Property<Guid>("Id")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<DateTimeOffset>("LastModified")
                                .HasColumnType("datetimeoffset");

                            b1.Property<string>("LastModifiedBy")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime>("PublishedOn")
                                .HasColumnType("datetime2");

                            b1.Property<string>("Title")
                                .IsRequired()
                                .HasMaxLength(200)
                                .HasColumnType("nvarchar(200)");

                            b1.Property<int>("Year")
                                .HasColumnType("int");

                            b1.HasKey("BookAggregateId");

                            b1.ToTable("Books");

                            b1.WithOwner()
                                .HasForeignKey("BookAggregateId");

                            b1.OwnsOne("Library.Domain.ValueObjects.Isbn", "Isbn", b2 =>
                                {
                                    b2.Property<Guid>("BookAggregateId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<string>("Value")
                                        .IsRequired()
                                        .HasColumnType("nvarchar(max)")
                                        .HasColumnName("Isbn");

                                    b2.HasKey("BookAggregateId");

                                    b2.ToTable("Books");

                                    b2.WithOwner()
                                        .HasForeignKey("BookAggregateId");
                                });

                            b1.Navigation("Isbn");
                        });

                    b.Navigation("Book")
                        .IsRequired();
                });

            modelBuilder.Entity("Library.Domain.Aggregates.AuthorAggregate", b =>
                {
                    b.Navigation("BookAuthors");
                });

            modelBuilder.Entity("Library.Domain.Aggregates.BookAggregate", b =>
                {
                    b.Navigation("BookAuthors");
                });
#pragma warning restore 612, 618
        }
    }
}
